"use strict";

$(window).ready(() => {
  const input = $(".search input");
  const description = $(".description");
  const recipes = $(".recipes");
  const submitButton = $("button.submit");
  const dimmer = $(".ui.dimmer");
  const previous = $("#previous");
  const next = $("#next");
  const current = $("#current");
  const paginationWrapper = $(".pagination-wrapper");
  let recipeRes = [];

  // in pagination, by default, currentPage should be 1
  localStorage.setItem("currentPage", 1);

  // get the item from the recipes whose link matches with the given link
  // since the link is the only unique property in the recipe item object
  // this uniqueness ensures operations are always valid
  const getItem = link => {
    let item;
    recipeRes.some(e => {
      if (e.href === link) {
        item = e;
      }
    });
    return item;
  };

  // the actual jquery ajax request to get the recipes
  const getRecipes = (ingredients, pageNum) => {
    $.ajax({
      type: "GET",
      // if no pageNumber is explicitly provided, set p=1, else use the provided one
      url: `http://www.recipepuppy.com/api/?i=${ingredients}&p=${
        !pageNum ? 1 : pageNum
      }`,
      jsonpCallback: "JSONCALLBACK", //specify callback name
      contentType: "application/json",
      dataType: "jsonp", //specify jsonp

      // when request successfully returns a response
      success: response => {
        // make the dimmer inactive
        dimmer.removeClass("active");

        // show error and make pagaination dissapear when result array is empty
        if (response.results.length === 0) {
          paginationWrapper.hide();
          // showWarning is defined in hadnleError&Warning.js
          showWarning(input.val());
        }

        // if result array is not empty
        else {
          // show the pagination
          paginationWrapper.show();
          // set the resultant array to recipeRes, so other blocks of code can access it
          recipeRes = response.results;
          // populate the description class with details
          description.append(
            `
            <div class="ui divider"></div>
            <h2 class="description-header">Showing ${
              recipeRes.length
            } recipes for your search ingredients: ${input.val()}</h2>`
          );
          // populate the recipes class with markup generated by looping over the response result array
          response.results.forEach(item => {
            // recipeItemMarkup function defined in recipeItemMarkup.js
            recipes.append(recipeItemMarkup(item, isFav));
          });
          // add click handler to the share button
          $(".share-button").click(e => {
            // get the link from the event target's parent
            const link = $(e.target)
              .parent()
              .parent()
              .find("a")
              .attr("href");
            // show the modal when clicked
            // the modal method is coming from `semantic-ui`
            $(".ui.basic.modal").modal("show");

            // set the .twitter-share-button href=`required link`
            $(".twitter-share-button").attr(
              "href",
              `https://twitter.com/intent/tweet?text=Hello%20World!!!%20Check%20this%20recipe%20out%3A%20${link}`
            );
            // set the link text in the modal
            $(".ui.basic.modal p.link").text(link);
          });

          // add click handler to the like button
          const likeButton = $(".like-button");
          // get the link from the event target's parent
          likeButton.click(e => {
            const link = $(e.target)
              .parent()
              .find("a")
              .attr("href");

            if (
              !$(e.target)
                .children()
                .hasClass("active")
            ) {
              $(e.target).html(`
            Added To Favorites <i class="like active icon"></i>
            `);
              localStorage.setObj("favorites", [
                ...myFavorites(),
                getItem(link)
              ]);
            } else if (
              $(e.target)
                .children()
                .hasClass("active")
            ) {
              $(e.target).html(`
            Add To Favorites <i class="like icon"></i>
            `);

              // remove the item from localstorage, cuz it's the second time's click
              const filteredFavourites = myFavorites().filter(
                (value, index, array) => {
                  return value.href !== link;
                }
              );
              localStorage.setObj("favorites", filteredFavourites);
            }
          });
        }
      },
      error: e => {
        console.log("error", e);
      }
    });
  };

  const handleSubmit = () => {
    if (!input.val()) {
      // when no input is provided, show error
      // showError is defined in hadnleError&Warning.js
      showError();
    }

    // return everything back to default states
    description.html("");
    localStorage.setItem("currentPage", 1);
    current.text("1");
    recipes.html("");
    getRecipes(input.val());
    dimmer.addClass("active");
  };

  submitButton.click(() => {
    handleSubmit();
  });

  // Execute a function when the user releases a key on the keyboard
  input.on("keyup", event => {
    // Number 13 is the "Enter" key on the keyboard
    if (event.keyCode === 13) {
      handleSubmit();
    }
  });

  // handle the pagination, currently shows 10 items per page
  const handlePagination = action => {
    // firstly, empty out the current content of recipes, or else append only
    // keeps adding to the list more and more
    recipes.html("");
    getRecipes(
      input.val(),
      action === "previous" ? getCurrentPage() - 1 : getCurrentPage() + 1
    );
    localStorage.setItem(
      "currentPage",
      action === "previous" ? getCurrentPage() - 1 : getCurrentPage() + 1
    );
    current.text(getCurrentPage());
    description.html("");
  };

  previous.click(() => {
    if (!previous.hasClass("disabled")) {
      handlePagination("previous");
    }
    // if the next click makes the currentPage negative, then disable previous button
    if (getCurrentPage() - 1 <= 0) {
      previous.addClass("disabled");
    }
  });

  next.click(() => {
    if (!next.hasClass("disabled")) {
      handlePagination("next");
    }
    // only when currentPage is more than 1, make previous button active
    if (getCurrentPage() > 1) {
      previous.removeClass("disabled");
    }
  });
});
